@model DemoProject.Models.ViewModels.TableViewModel
@using DemoProject.Models

<div class="row mb-5">
    <div class="card">
        <div class="card-body">
            <form id="filterForm">
                <div class="row row-cols-5">
                    <div class="col">
                        <label for="referansTipi" class="form-label">REFERANS TİPİ</label>
                        <select class="form-select" id="referansTipi" name="referansTipi">
                            <option value="" selected>Seçiniz</option>
                        </select>
                    </div>
                </div>
                <div class="col col-lg-3 col-md-4 col-sm-4 m-auto">
                    <div class="container-fluid">
                        <button id="filterReference" type="button" class="btn btn-primary w-100">Filtrele</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Referanslar</h5>
        <div class="table-responsive">
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>REFERANS TİPİ</th>
                        <th>REFERANS ID</th>
                        <th>REFERANS DEĞERİ</th>
                        <th>SİLME</th>
                    </tr>
                </thead>
                <tbody id="referenceTableBody">
                </tbody>
            </table>
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center" id="referencePagination"></ul>
            </nav>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        const pageSize = 10;

        $(document).ready(function () {
            loadReferencePage(1);
            loadReferenceTypes();
        });

        function generateReferencePagination(totalCount, currentPage, pageSize) {
            const totalPages = Math.ceil(totalCount / pageSize);
            const pagination = $('#referencePagination');
            pagination.empty();

            if (totalPages <= 1) return;

            pagination.append(`
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="javascript:void(0);" onclick="loadReferencePage(1)">
                        <i class="tf-icon bx bx-chevrons-left"></i>
                    </a>
                </li>`);

            pagination.append(`
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="javascript:void(0);" onclick="loadReferencePage(${currentPage - 1})">
                        <i class="tf-icon bx bx-chevron-left"></i>
                    </a>
                </li>`);

            for (let i = 1; i <= totalPages; i++) {
                pagination.append(`
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="javascript:void(0);" onclick="loadReferencePage(${i})">${i}</a>
                    </li>`
                );
            }

            pagination.append(`
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="javascript:void(0);" onclick="loadReferencePage(${currentPage + 1})">
                        <i class="tf-icon bx bx-chevron-right"></i>
                    </a>
                </li>`);

            pagination.append(`
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="javascript:void(0);" onclick="loadReferencePage(${totalPages})">
                        <i class="tf-icon bx bx-chevrons-right"></i>
                    </a>
                </li>`);
        }

        function loadReferencePage(page = 1) {
            currentPage = page;
            const selectedReferenceType = $('#referansTipi').val();
             console.log('Seçilen referans tipi:', selectedReferenceType);
            console.log('Gönderilen parametreler:', { page: page, pageSize: pageSize, referenceType: selectedReferenceType });
            $.ajax({
                url: '/Home/GetReferencesPaged',
                type: 'GET',
                cache: false, 
                data: {
                    page: page,
                    pageSize: pageSize,
                    referenceType: selectedReferenceType 
                },
                success: function(response) {
                    console.log('Backend response:', response);
                    if (response.error) {
                        console.error('Backend Error:', response.message);
                        alert('Sunucu hatası: ' + response.message);
                        return;
                    }
                    const tbody = $('#referenceTableBody');
                    tbody.empty();
                    if (response.data.length === 0) {
                        tbody.append('<tr><td colspan="5" class="text-center">Veri bulunamadı.</td></tr>');
                        $('#referencePagination').empty();
                        return;
                    }
                    response.data.forEach(function(item, index) {
                        const status = item.isActive ? 'Aktif' : 'Pasif';
                        tbody.append(`
                            <tr id="referenceRow_${item.id}">
                                <td>${(page - 1) * pageSize + index + 1}</td>
                                <td>${item.referenceType}</td>
                                <td>${item.referenceKey}</td>
                                <td>${item.referenceValue}</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" onclick="deleteReference(${item.id})"> Sil </button>
                                </td>
                            </tr>
                        `);
                    });
                    generateReferencePagination(response.totalCount, page, pageSize);
                },
                error: function(xhr, status, error) {
                    console.error('AJAX Error:', {
                        status: xhr.status,
                        statusText: xhr.statusText,
                        responseText: xhr.responseText,
                        error: error
                    });
                    alert('Veriler yüklenirken hata oluştu. Console\'u kontrol edin.');
                }
            });
        }
        function deleteReference(id) {
            console.log("Silinecek ID:", id);
            if (!confirm("Bu referansı silmek istediğinize emin misiniz?")) return;
            $.ajax({
                url: '/Home/SoftDeleteReference',
                type: 'POST',
                data: { id: id },
                success: function (response) {
                    if (response.success) {
                        loadReferencePage(currentPage);
                    } else {
                        alert("Silme işlemi başarısız: " + response.message);
                    }
                },
                error: function () {
                    alert("Sunucuya bağlanırken hata oluştu.");
                }
            });
        }
        function loadReferenceTypes() {
            $.ajax({
                url: '/Home/GetReferenceTypes',
                type: 'GET',
                success: function (data) {
                    var dropdown = $('#referansTipi');
                    dropdown.empty();
                    dropdown.append('<option value="">Seçiniz</option>');
                    $.each(data, function (i, item) {
                        dropdown.append('<option value="' + item + '">' + item + '</option>');
                    });
                },
                error: function (xhr, status, error) {
                    console.error('Referans tipleri yüklenemedi:', error);
                    alert("Referans tipleri yüklenemedi. Hata: " + error);
                }
            });
        }
        $('#filterReference').click(function (e) {
            e.preventDefault();
            const selectedValue = $('#referansTipi').val();
            console.log('Filtrele butonuna basıldı. Seçilen değer:', selectedValue);

            if (!selectedValue) {
                alert('Lütfen bir referans tipi seçin!');
                return;
            }
            loadReferencePage(1);
        });
    </script>
}